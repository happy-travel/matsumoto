kind: pipeline
type: docker
name: Build

trigger:
  branch:
    - master
  event:
    include:
      - push

steps:
- name: Build docker image & push to repository
  image: plugins/docker
  environment:
    IDENTITY_URL:
      from_secret: IDENTITY_DEV_URL
    EDO_URL:
      from_secret: EDO_DEV_URL
    SENTRY_DSN:
      from_secret: SENTRY_DEV_DSN
    BUILD_VERSION: ${DRONE_COMMIT_SHA:0:7}
  settings:
    registry: registry.happytravel.com
    repo: registry.happytravel.com/matsumoto
    tags:
      - ${DRONE_COMMIT_SHA:0:7}
      - ${DRONE_COMMIT_BRANCH}
    force_tag: true
    use_cache: true
    username:
      from_secret: TRAVEL_DOCKER_LOGIN
    password:
      from_secret: TRAVEL_DOCKER_PASSWORD
    build_args_from_env:
      - IDENTITY_URL
      - EDO_URL
      - SENTRY_DSN
      - BUILD_VERSION

- name: Deploy to DEV
  image: pelotech/drone-helm3
  settings:
    mode: upgrade
    chart: ./Helm_v3/matsumoto
    release: matsumoto-dev
    values_files: ["Helm_v3/matsumoto/values_dev.yaml"]
    namespace: dev
    skip_tls_verify: true
    wait_for_upgrade: true
    values: image.tag=${DRONE_COMMIT_SHA:0:7}
  environment:
    KUBE_API_SERVER:
      from_secret: KUBERNETES_DEV_API
    KUBE_TOKEN:
      from_secret: KUBERNETES_DEV_TOKEN

- name: discord
  pull: always
  image: appleboy/drone-discord
  settings:
    avatar_url: https://www.pngitem.com/pimgs/m/86-868269_drone-logo-png-transparent-drone-ci-logo-png.png
    message: "{{#success build.status}} ☑ Build #{{build.number}}\n`{{ build.event }}` of `{{repo.name}}` succeeded.\n Commit by {{commit.author}} on `{{commit.branch}}`:\n``` {{commit.message}} ```\n{{ build.link }} {{else}} ☒ Build #{{build.number}}\n`{{ build.event }}` of `{{repo.name}}` failed.\n Commit by {{commit.author}} on `{{commit.branch}}`:\n``` {{commit.message}} ```\n{{ build.link }} {{/success}}"
    webhook_id:
      from_secret: DISCORD_WEBHOOK_ID
    webhook_token:
      from_secret: DISCORD_WEBHOOK_TOKEN
  when:
    status: [success, failure]

---
kind: pipeline
type: docker
name: staging

trigger:
  branches:
    - master
  event:
    - promote
  target:
    - staging    

steps:
- name: Build docker image & push to repository
  image: plugins/docker
  environment:
    IDENTITY_URL:
      from_secret: IDENTITY_STAGING_URL
    EDO_URL:
      from_secret: EDO_STAGING_URL
    SENTRY_DSN:
      from_secret: SENTRY_STAGING_DSN
    BUILD_VERSION: ${DRONE_COMMIT_SHA:0:7}
  settings:
    registry: registry.happytravel.com
    repo: registry.happytravel.com/matsumoto
    tags:
      - ${DRONE_COMMIT_SHA:0:7}
      - ${DRONE_COMMIT_BRANCH}
    force_tag: true
    use_cache: true
    username:
      from_secret: TRAVEL_DOCKER_LOGIN
    password:
      from_secret: TRAVEL_DOCKER_PASSWORD
    build_args_from_env:
      - IDENTITY_URL
      - EDO_URL
      - SENTRY_DSN
      - BUILD_VERSION

- name: Deploy to staging
  image: pelotech/drone-helm3
  settings:
    mode: upgrade
    chart: ./Helm_v3/matsumoto
    release: matsumoto-staging
    values_files: ["Helm_v3/matsumoto/values_staging.yaml"]
    namespace: staging
    skip_tls_verify: true
    wait_for_upgrade: true
    values: image.tag=${DRONE_COMMIT_SHA:0:7}
  environment:
    KUBE_API_SERVER:
      from_secret: KUBERNETES_STAGING_API
    KUBE_TOKEN:
      from_secret: KUBERNETES_STAGING_TOKEN

- name: discord
  pull: always
  image: appleboy/drone-discord
  settings:
    avatar_url: https://www.pngitem.com/pimgs/m/86-868269_drone-logo-png-transparent-drone-ci-logo-png.png
    message: "{{#success build.status}} ☑ Build #{{build.number}}\n`{{ build.event }}` of `{{repo.name}}` on staging succeeded.\n Commit by {{commit.author}} on `{{commit.branch}}`:\n``` {{commit.message}} ```\n{{ build.link }} {{else}} ☒ Build #{{build.number}}\n`{{ build.event }}` of `{{repo.name}}` on staging failed.\n Commit by {{commit.author}} on `{{commit.branch}}`:\n``` {{commit.message}} ```\n{{ build.link }} {{/success}}"
    webhook_id:
      from_secret: DISCORD_WEBHOOK_ID
    webhook_token:
      from_secret: DISCORD_WEBHOOK_TOKEN
  when:
    status: [success, failure]

---
kind: pipeline
type: docker
name: production

trigger:
  branches:
    - master
  event:
    - promote
  target:
    - production

steps:
- name: Build docker image & push to repository
  image: plugins/docker
  environment:
    IDENTITY_URL:
      from_secret: IDENTITY_PROD_URL
    EDO_URL:
      from_secret: EDO_PROD_URL
    SENTRY_DSN:
      from_secret: SENTRY_PROD_DSN
    BUILD_VERSION: ${DRONE_COMMIT_SHA:0:7}
  settings:
    registry: registry.happytravel.com
    repo: registry.happytravel.com/matsumoto
    tags:
      - ${DRONE_COMMIT_SHA:0:7}
      - ${DRONE_COMMIT_BRANCH}
    force_tag: true
    use_cache: true
    username:
      from_secret: TRAVEL_DOCKER_LOGIN
    password:
      from_secret: TRAVEL_DOCKER_PASSWORD
    build_args_from_env:
      - IDENTITY_URL
      - EDO_URL
      - SENTRY_DSN
      - BUILD_VERSION

- name: Deploy to production
  image: pelotech/drone-helm3
  settings:
    mode: upgrade
    chart: ./Helm_v3/matsumoto
    release: matsumoto-production
    values_files: ["Helm_v3/matsumoto/values_prod.yaml"]
    namespace: production
    skip_tls_verify: true
    wait_for_upgrade: true
    values: image.tag=${DRONE_COMMIT_SHA:0:7}
  environment:
    KUBE_API_SERVER:
      from_secret: KUBERNETES_PROD_API
    KUBE_TOKEN:
      from_secret: KUBERNETES_PROD_TOKEN

- name: discord
  pull: always
  image: appleboy/drone-discord
  settings:
    avatar_url: https://www.pngitem.com/pimgs/m/86-868269_drone-logo-png-transparent-drone-ci-logo-png.png
    message: "{{#success build.status}} ☑ Build #{{build.number}}\n`{{ build.event }}` of `{{repo.name}}` on production succeeded.\n Commit by {{commit.author}} on `{{commit.branch}}`:\n``` {{commit.message}} ```\n{{ build.link }} {{else}} ☒ Build #{{build.number}}\n`{{ build.event }}` of `{{repo.name}}` on production failed.\n Commit by {{commit.author}} on `{{commit.branch}}`:\n``` {{commit.message}} ```\n{{ build.link }} {{/success}}"
    webhook_id:
      from_secret: DISCORD_WEBHOOK_ID
    webhook_token:
      from_secret: DISCORD_WEBHOOK_TOKEN
  when:
    status: [success, failure]        
